name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  packages: write

jobs:
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          chmod +x kubeval
          sudo mv kubeval /usr/local/bin
      
      - name: Validate Kubernetes manifests
        run: |
          kubeval --ignore-missing-schemas k8s/*.yaml

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [adservice, cartservice, checkoutservice, currencyservice, emailservice, frontend, paymentservice, productcatalogservice, recommendationservice, shippingservice]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/online-boutique-${{ matrix.service }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: ./src/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.event.inputs.environment == 'development' || github.event.inputs.environment == null)
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.25.3
      
      - name: Configure kubectl context
        run: |
          minikube update-context
      
      - name: Create namespace
        run: |
          kubectl create namespace shop-microservices --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Update Kubernetes manifests with new image tags
        run: |
          # Get the SHA of the current commit
          SHA=${{ github.sha }}
          
          for service in adservice cartservice checkoutservice currencyservice emailservice frontend paymentservice productcatalogservice recommendationservice shippingservice; do
            if [ -f "k8s/${service}.yaml" ]; then
              # Update the image tag in the manifest file
              sed -i "s|image: .*${service}:.*|image: ghcr.io/${{ github.repository_owner }}/online-boutique-${service}:sha-${SHA}|g" k8s/${service}.yaml
            fi
          done
      
      - name: Apply Kubernetes configurations
        run: |
          # First apply ConfigMap and Secrets if they exist
          if [ -f "k8s/service-config.yaml" ]; then
            kubectl apply -f k8s/service-config.yaml -n shop-microservices
          fi
          
          if [ -f "k8s/service-secrets.yaml" ]; then
            kubectl apply -f k8s/service-secrets.yaml -n shop-microservices
          fi
          
          # Then apply Redis
          kubectl apply -f k8s/redis-cart.yaml -n shop-microservices
          
          # Wait for Redis to be ready
          kubectl wait --for=condition=ready pod -l app=redis-cart -n shop-microservices --timeout=120s || true
          
          # Apply all other services
          kubectl apply -f k8s/adservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/cartservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/currencyservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/emailservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/paymentservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/productcatalogservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/recommendationservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/shippingservice.yaml -n shop-microservices || true
          kubectl apply -f k8s/checkoutservice.yaml -n shop-microservices || true
          
          # Apply frontend last
          kubectl apply -f k8s/frontend.yaml -n shop-microservices || true
          
          # Apply ingress if it exists
          if [ -f "k8s/ingressservice.yaml" ]; then
            kubectl apply -f k8s/ingressservice.yaml -n shop-microservices || true
          fi
      
      - name: Wait for deployment to complete
        run: |
          for deployment in $(kubectl get deployments -n shop-microservices -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout status deployment/$deployment -n shop-microservices --timeout=180s || true
          done
      
      - name: Get application URL
        run: |
          minikube service frontend -n shop-microservices --url
          echo "The Online Boutique application is now accessible!"
          
      - name: Generate deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "## Environment: Development" >> deployment-report.md
          echo "## Commit: ${{ github.sha }}" >> deployment-report.md
          echo "## Deployed services:" >> deployment-report.md
          kubectl get deployments -n shop-microservices -o wide >> deployment-report.md
          echo "## Service endpoints:" >> deployment-report.md
          kubectl get svc -n shop-microservices >> deployment-report.md
          
      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md