name: Microservices CI Pipeline

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'terraform/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_HUB_USERNAME: huzaifanasirrr

permissions: write-all

jobs:
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          chmod +x kubeval
          sudo mv kubeval /usr/local/bin
      
      - name: Validate Kubernetes manifests
        run: |
          kubeval --ignore-missing-schemas k8s/*.yaml

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        include:
          - service: adservice
            dockerfile_path: ./src/adservice
          - service: cartservice
            dockerfile_path: ./src/cartservice/src
          - service: checkoutservice
            dockerfile_path: ./src/checkoutservice
          - service: currencyservice
            dockerfile_path: ./src/currencyservice
          - service: emailservice
            dockerfile_path: ./src/emailservice
          - service: frontend
            dockerfile_path: ./src/frontend
          - service: paymentservice
            dockerfile_path: ./src/paymentservice
          - service: productcatalogservice
            dockerfile_path: ./src/productcatalogservice
          - service: recommendationservice
            dockerfile_path: ./src/recommendationservice
          - service: shippingservice
            dockerfile_path: ./src/shippingservice
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: Verify Dockerfile exists
        run: |
          if [ ! -f "${{ matrix.dockerfile_path }}/Dockerfile" ]; then
            echo "Dockerfile not found at ${{ matrix.dockerfile_path }}/Dockerfile"
            ls -la ${{ matrix.dockerfile_path }}
            exit 1
          else
            echo "Found Dockerfile at ${{ matrix.dockerfile_path }}/Dockerfile"
          fi
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/online-boutique-${{ matrix.service }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.dockerfile_path }}
          file: ${{ matrix.dockerfile_path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-deployment:
    name: Test Kubernetes Configuration
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Validate YAML syntax
        run: |
          # Install PyYAML for proper multi-document YAML handling
          pip install PyYAML
          
          # Function to validate a YAML file with multiple documents
          validate_yaml_file() {
            python3 - << EOF
import yaml
import sys
try:
    with open("$1", 'r') as file:
        docs = list(yaml.safe_load_all(file))
    print(f"✅ {len(docs)} YAML documents in $1 are valid")
except yaml.YAMLError as e:
    print(f"❌ YAML error in $1: {e}")
    sys.exit(1)
EOF
          }
          
          # Validate each YAML file
          for file in k8s/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              validate_yaml_file "$file"
            fi
          done
      
      - name: Check Kubernetes manifest structure
        run: |
          # Check for required fields in manifests
          for file in k8s/*.yaml; do
            if [ -f "$file" ]; then
              echo "Checking structure of $file..."
              # Check if file contains kind and apiVersion
              if ! grep -q "kind:" "$file"; then
                echo "❌ $file is missing 'kind' field"
                exit 1
              fi
              if ! grep -q "apiVersion:" "$file"; then
                echo "❌ $file is missing 'apiVersion' field"
                exit 1
              fi
              echo "✅ $file has required fields"
            fi
          done
      
      - name: Check service dependencies
        run: |
          echo "Checking service dependencies in Kubernetes manifests..."
          
          # Define expected services
          declare -a EXPECTED_SERVICES=("frontend" "cartservice" "productcatalogservice" "currencyservice" 
                                       "paymentservice" "shippingservice" "emailservice" "checkoutservice"
                                       "recommendationservice" "adservice" "redis-cart")
          
          # Check if all expected services have deployment manifests
          for service in "${EXPECTED_SERVICES[@]}"; do
            if grep -q "name: $service" k8s/*.yaml; then
              echo "✅ Found configuration for $service"
            else
              echo "⚠️ Warning: Could not find configuration for $service"
            fi
          done
          
          # Success - we're just checking, not failing the build for warnings
          echo "Dependencies check completed"
      
      - name: Check environment variables
        run: |
          echo "Checking environment variables in Kubernetes manifests..."
          
          # Look for critical environment variables in the manifests
          if ! grep -q "REDIS_ADDR" k8s/cartservice.yaml; then
            echo "⚠️ Warning: cartservice might be missing REDIS_ADDR environment variable"
          else
            echo "✅ cartservice has REDIS_ADDR environment variable"
          fi
          
          if grep -q "PRODUCT_CATALOG_SERVICE_ADDR" k8s/frontend.yaml; then
            echo "✅ frontend has PRODUCT_CATALOG_SERVICE_ADDR environment variable"
          else
            echo "⚠️ Warning: frontend might be missing PRODUCT_CATALOG_SERVICE_ADDR environment variable"
          fi
          
          # Success - we're just checking, not failing the build
          echo "Environment variables check completed"
      
      - name: Verify deployment configuration
        run: |
          echo "✅ All validation checks passed successfully"
          echo "The microservices application is ready to be deployed to Kubernetes"
          echo "Docker images would be deployed from: ${{ env.DOCKER_HUB_USERNAME }}/online-boutique-*"